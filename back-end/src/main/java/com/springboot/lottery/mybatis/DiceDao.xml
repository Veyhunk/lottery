<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springboot.lottery.mybatis.DiceDao">
	<resultMap type="com.springboot.lottery.dto.DiceBetDTO" id="diceBetDTOResult">
        <result column="mid" property="mid" />
        <result column="term" property="term" />
        <result column="bet" property="bet" />
        <result column="bet_value" property="bet_value" />
        <result column="win" property="win" />
        <result column="bet_time" property="bet_time" />
        <result column="draw_time" property="draw_time" />
        <result column="draw_term" property="draw_term" />
        <result column="win_money" property="win_money" />
    </resultMap>
    
    <resultMap type="com.springboot.lottery.dto.DiceDrawDTO" id="diceDrawDTOResult">
        <id column="id" property="id" />
        <result column="current_term" property="current_term" />
        <result column="result" property="result" />
        <result column="end_time" property="end_time" />
        <result column="bet_total" property="bet_total" />
        <result column="win_total" property="win_total" />
        <collection property="diceBetDTOs" resultMap="diceBetDTOResult" />
    </resultMap>
    
	<insert id="addDiceDraw" parameterType="com.springboot.lottery.entity.DiceDraw">
		INSERT INTO 
			dice_draw(current_term,
			prize_pool,
			start_time,
			result,
			end_time)
	    VALUES(#{current_term},
			#{prize_pool},
			#{start_time},
			#{result},
			#{end_time})
	</insert>
	
	<insert id="addDiceBet" parameterType="com.springboot.lottery.entity.DiceBet">
		INSERT INTO 
			dice_bet(mid,
			term,
			bet,
			bet_value,
			win,
			bet_time,
			draw_time,
			draw_term,
			win_money)
	    VALUES(#{mid},
			#{term},
			#{bet},
			#{bet_value},
			#{win},
			#{bet_time},
			#{draw_time},
			#{draw_term},
			#{win_money})
	</insert>
		
	<update id="updateDiceBet" parameterType="com.springboot.lottery.entity.DiceBet">
		UPDATE
			dice_bet d
		SET
		   d.win = #{win},d.draw_time=#{draw_time},d.draw_term=#{draw_term},d.win_money=#{win_money}
		WHERE
		    d.id = #{id}
	</update>
	
	<update id="updateDiceDraw" parameterType="java.util.Map">
		UPDATE
			dice_draw d
		SET
		   d.result = #{result}, d.end_time=#{end_time}, d.bet_total=#{bet_total}, d.win_total=#{win_total}
		WHERE
		    d.id = #{id}
	</update>
	
	<select id="queryDiceDraw" resultType="com.springboot.lottery.entity.DiceDraw" parameterType="java.util.Map">
		SELECT * FROM 
		dice_draw 
		WHERE 1 = 1
		<if test="current != null">
			AND end_time is null
		</if>
		<if test="beginIndex != null and pageSize != null and pageSize != 0">
			order by id desc limit ${beginIndex},${pageSize}
		</if>
	</select>
	
	
	
	
	<select id="queryDiceDrawResult" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT bet, sum(bet_value) as bet_value  FROM dice_bet
		WHERE 1 = 1
		<if test="term != null">
			and term=${term}
		</if>
		group by bet
	</select>
	
	<select id="queryDiceBet" resultType="com.springboot.lottery.entity.DiceBet" parameterType="java.util.Map">
		SELECT * FROM 
		dice_bet 
		WHERE 1 = 1
		<if test="mid != null">
			and mid = #{mid}
		</if>
		<if test="history != null">
			and win is not null
		</if>
		<if test="term != null and term != 0">
			and term = ${term}
		</if>
		<if test="beginIndex != null and pageSize != null and pageSize != 0">
			order by id desc limit ${beginIndex},${pageSize}
		</if>	
	</select>
	<select id="queryDiceDrawWithBetDTO" resultMap="diceDrawDTOResult" parameterType="java.util.Map">
		select m.id, m.current_term, m.end_time,m.result,m.bet_total,m.win_total,b.mid,b.term,b.bet,b.bet_value,b.win,b.bet_time,b.draw_time,b.draw_term,b.win_money from
			(select d.id, d.current_term,d.end_time,d.result,d.bet_total,d.win_total from dice_draw d where d.current_term in 
				(select b.term from dice_bet b where b.mid=#{mid} and win is not null)
					order by d.id desc limit ${beginIndex},${pageSize}) m, dice_bet b
					where m.current_term = b.term and b.mid=#{mid}
	</select>	
	<select id="queryDiceDrawWithBetDTOTotal" resultType="java.lang.Integer" parameterType="java.util.Map">
		select count(*) from dice_draw d where d.current_term in 
			(select b.term from dice_bet b where b.mid=#{mid} and win is not null)
	</select>
	
	<select id="queryDiceDrawBetDTO" resultMap="diceDrawDTOResult" parameterType="java.util.Map">
		select m.id, m.current_term, m.end_time,m.result,m.bet_total,m.win_total,b.mid,b.term,b.bet,b.bet_value,b.win,b.bet_time,b.draw_time,b.draw_term,b.win_money from
		(SELECT d.id, d.current_term,d.end_time,d.result,d.bet_total,d.win_total FROM dice_draw d 
		where d.result is not null
        order by d.id desc limit ${beginIndex},${pageSize}) m left outer join dice_bet b 
        on m.current_term=b.term and b.mid=#{mid}	
	</select>	
	<select id="queryDiceDrawBetTotal" resultType="java.lang.Integer" parameterType="java.util.Map">
		SELECT count(*) FROM dice_draw d 
		where d.result is not null
	</select>
	<update id="updateSum" parameterType="java.util.Map">
		UPDATE
			member m
		SET
		   m.sum = m.sum + #{sum}, m.version=m.version + 1 
		WHERE
		    m.mid = #{mid}
	</update>		
</mapper>